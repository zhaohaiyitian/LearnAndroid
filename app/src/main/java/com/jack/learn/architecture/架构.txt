
Android源码设计模式分析


六大原则：
1.单一职责
一个类中应该是一组相关性很高的函数，数据的封装
2.开闭原则
对扩展是开放的，对修改是关闭的
实现具有存取图片的接口，通过setXXX()注入到ImageLoader中,这样就实现了千变万化的缓存策略。并且扩展这些缓存策略并不会导致ImageLoader的修改。
3.里氏替换
里氏替换原则就是依赖继承多态这两大特性
所有引用基类的地方必须能透明的使用其子类对象
ImageCache建立了缓存图片，保存图片的接口规范，MemoryCache等根据接口规范实现了相应的功能，用户只需要在使用时指定具体的缓存对象就可以动态的替换ImageLoader中的缓存策略。
4.依赖倒置
模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系通过接口或抽象类产生的
我们建立了ImageCache抽象，并且让ImageLoader依赖于抽象而不是具体细节，当需求变化时只需要实现ImageCache完成相应的缓存功能，然后将具体的实现注入到ImageLoader中即可完成缓存功能的替换
5.接口隔离
让客户端依赖的接口尽可能小
ImageLoader只需要知道该缓存对象有存，取缓存图片的接口即可，其他的一概不管，也就使得缓存功能的具体实现对ImageLoader隐藏，这就是用最小化接口隔离了实现类的细节
6.迪米特原则
只与直接的朋友通信，两个对象之间的耦合就成为了朋友关系
比如ImageLoader只需要知道cache 而不需要知道具体的实现细节 这样当替换不同的缓存时，对ImageLoader时无感知的

思考线程的设计