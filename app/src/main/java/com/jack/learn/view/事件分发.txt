socketpair()创建的是一对已经相互连接的套接字，而socket()则创建一个单独的未连接的套接字。
这意味着使用socketpair()创建的套接字无需额外的连接步骤，即可进行双向通信，因为它们在创建时就已经建立了连接。

Linux底层产生事件 通过socketpair传递到ViewRootImpl
当手指触摸屏幕时，屏幕硬件产生触摸信息，触摸信息被系统底层驱动获取，交给IMS，
IMS会对这个触摸信息进行处理，IMS通过WMS找到要分发的window，随后发送给对应的viewRootImpl


面试回答步骤？

先回答 事件的来源 手指触摸屏幕
在回答触摸信息是如何产生的 屏幕硬件产生触摸信息
然后在回答 如何采集的  有系统底层驱动采集 交给IMS
最后有IMS对触摸信息进行处理
在以后将触摸信息通过WMS找到对应的window 通过socktpair传递到ViewRootImpl



事件分发
首先ViewRootImpl将事件给到DecorView，但是DecorView并没有直接将事件给到ViewGroup，
而是先给了Activity，然后Activity将事件给到PhoneWindow，最后才交给ViewGroup


DecorView交给Activity处理，Activity直接交给PhoneWindow处理，PhoneWindow直接交给其内部的DecorView处理，
而DecorView则直接调用父类ViewGroup的方法进行分发，ViewGroup则会按照具体的逻辑分发到整个控件树中感兴趣的子控件。
ViewRootImpl
  -->mView.dispatchPointerEvent(event)
    View
      -->dispatchPointerEvent(event)
        DecorView
        -->dispatchTouchEvent()
          Activity
          -->dispatchTouchEvent()
            PhoneWindow
            -->superDispatchTouchEvent()
              DecorView
              -->superDispatchTouchEvent()
              -->dispatchTouchEvent()
                ViewGroup
                -->dispatchTouchEvent()



当一个child消费了一个DOWN事件之后，mFirstTouchTarget就不再为空

当一个View消费了DOWN事件之后，后续的事件系统默认都会给他消费

给View和ViewGroup同时设置clickListener事件 为什么view的执行viewGroup的不执行？？？？？？


事件冲突解决方案
内部拦截法：是指父容器不拦截任何事件，所有的事件都传递给子元素，如果子元素需要此事件就直接消耗掉，否则就交与父容器进行处理

父view
override fun onInterceptTouchEvent(ev: MotionEvent?): Boolean {
    if (ev?.action == MotionEvent.ACTION_DOWN) {
        super.onInterceptTouchEvent(ev)
        return false
    }
    return true
}
子view
override fun dispatchTouchEvent(ev: MotionEvent?): Boolean {

        when (ev?.action) {
            MotionEvent.ACTION_DOWN -> {
                //不能被拦截
                parent.requestDisallowInterceptTouchEvent(true)
            }
            MotionEvent.ACTION_MOVE -> {
                var endX = ev.rawX
                var endY = ev.rawY
                //竖向滑动
                if (abs(endX - startX) > abs(endY - startY)) {
                    parent.requestDisallowInterceptTouchEvent(false)
                }
                startX = endX
                startY = endY
            }
        }
        return super.dispatchTouchEvent(ev)
}
这时会触发一个ACTION_CANCEL事件，这个事件是子View事件被上层拦截的时候触发的

外部拦截法  需要重写父容器的onInterceptTouchEvent方法，在内部做相应的拦截即可。
override fun onInterceptTouchEvent(ev: MotionEvent?): Boolean {
        var intercepted = false
        when (ev?.action) {
            MotionEvent.ACTION_DOWN -> {

            }
            MotionEvent.ACTION_MOVE -> {
                val endX = ev.rawX
                val endY = ev.rawY
                //竖向滑动
                intercepted = abs(endX - startX) > abs(endY - startY)

                startX = endX
                startY = endY
            }
        }
        return intercepted
}


吸顶方案有哪几种？

滑动的类型：
1.scroll 手指没有离开屏幕的滑动
2.fling 手指离开屏幕的惯性滑动

NestedScrolling  嵌套滑动

onNestedPreScroll

RecyclerView 支持嵌套滑动
 -->startNestedScroll()

















